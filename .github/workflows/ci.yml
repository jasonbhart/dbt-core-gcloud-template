name: ci-pr

on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ "README.md" ]

env:
  DBT_BQ_LOCATION: us
  DBT_TARGET: ci
  DBT_PROFILES_DIR: ./profiles

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Prepare dbt for templating (deps only)
        run: |
          python -m pip install --upgrade pip
          python -m pip install "dbt-core==1.10.8" "dbt-bigquery==1.10.1"
          dbt deps
      - name: Run pre-commit (lint only)
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --hook-stage manual --all-files --show-diff-on-failure
        env:
          # Ensure sqlfluff's dbt templater can resolve a profile without real credentials
          DBT_TARGET: ci
          DBT_PROFILES_DIR: ./profiles
          DBT_GCP_PROJECT_CI: lint-ci
          DBT_BQ_DATASET: lint_ci
          DBT_BQ_LOCATION: US

  bigquery-ci:
    needs: [lint]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v5

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_CI_SA_EMAIL }}
          # Create ADC credentials file for dbt-bigquery (profiles.ci uses service-account + keyfile)
          create_credentials_file: true
          export_environment_variables: true

      - uses: google-github-actions/setup-gcloud@v2

      - name: Python & dbt install
        run: |
          python -m pip install --upgrade pip
          python -m pip install "dbt-core==1.10.8" "dbt-bigquery==1.10.1"

      - name: Set CI env
        run: |
          echo "DBT_GCP_PROJECT_CI=${{ secrets.GCP_PROJECT_CI }}" >> $GITHUB_ENV
          echo "DBT_ARTIFACTS_BUCKET=${{ secrets.DBT_ARTIFACTS_BUCKET }}" >> $GITHUB_ENV
          echo "DBT_USER=ci_${{ github.actor }}" >> $GITHUB_ENV
          echo "DBT_BQ_DATASET=ci_pr_${{ github.event.number }}_${{ github.run_id }}" >> $GITHUB_ENV
          echo "DBT_GCP_PROJECT_PROD=${{ secrets.GCP_PROJECT_PROD }}" >> $GITHUB_ENV
          echo "DIFF_LIMIT=200" >> $GITHUB_ENV
          echo "CI_SA_EMAIL=${{ secrets.GCP_CI_SA_EMAIL }}" >> $GITHUB_ENV
          echo "MAKE_DATASET_READONLY=true" >> $GITHUB_ENV
          echo "RUN_FRESHNESS=false" >> $GITHUB_ENV
          echo "FRESHNESS_SELECT=source:raw.example" >> $GITHUB_ENV
          echo "DBT_BQ_PRIORITY=interactive" >> $GITHUB_ENV
          echo "DBT_MAX_BYTES_BILLED=" >> $GITHUB_ENV
          echo "DBT_JOB_EXECUTION_TIMEOUT_SEC=" >> $GITHUB_ENV
          # Ensure dbt-bigquery (profiles.ci) finds the credentials file minted by auth step
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      - name: Create ephemeral dataset
        run: bash scripts/create_bq_dataset.sh

      - name: Slim CI build (with defer if prod manifest exists)
        id: dbt_build
        run: bash scripts/ci_build.sh

      - name: Source freshness (optional)
        if: ${{ steps.dbt_build.outcome == 'success' && env.RUN_FRESHNESS == 'true' }}
        run: |
          if [[ -n "${FRESHNESS_SELECT}" ]]; then
            dbt source freshness --select "${FRESHNESS_SELECT}" || true
          else
            dbt source freshness || true
          fi

      - name: Generate docs (optional preview)
        if: ${{ steps.dbt_build.outcome == 'success' }}
        run: dbt docs generate --static

      - name: Generate data diffs for changed models
        if: ${{ steps.dbt_build.outcome == 'success' }}
        run: bash scripts/pr_data_diff.sh

      - name: Generate schema diffs for changed models
        if: ${{ steps.dbt_build.outcome == 'success' }}
        run: bash scripts/pr_schema_diff.sh

      - name: Upload CI artifacts (docs + manifest + data diffs)
        if: ${{ steps.dbt_build.outcome == 'success' }}
        continue-on-error: true
        run: |
          echo "Using artifacts bucket: ${DBT_ARTIFACTS_BUCKET:-<unset>}"
          if [[ -z "${DBT_ARTIFACTS_BUCKET:-}" ]]; then
            echo "DBT_ARTIFACTS_BUCKET not set; skipping artifact upload"
          else
            # Verify the CI identity can list the bucket; if not, print guidance and skip.
            if ! gsutil ls "gs://${DBT_ARTIFACTS_BUCKET}/" >/dev/null 2>&1; then
              echo "[warn] CI does not have list access to gs://${DBT_ARTIFACTS_BUCKET}/" >&2
              echo "       Grant roles/storage.objectAdmin to ${CI_SA_EMAIL} on this bucket or run infra/10-bootstrap.sh" >&2
              exit 0
            fi
            if [[ -d ./target ]]; then
              gsutil -m rsync -r ./target "gs://${DBT_ARTIFACTS_BUCKET}/ci/pr-${{ github.event.number }}-${{ github.run_id }}/"
            else
              echo "No ./target directory found; skipping docs rsync"
            fi
            if [[ -f target/manifest.json ]]; then
              gsutil cp target/manifest.json "gs://${DBT_ARTIFACTS_BUCKET}/ci/pr-${{ github.event.number }}-${{ github.run_id }}/manifest.json"
            else
              echo "No target/manifest.json found; skipping manifest upload"
            fi
          fi
          echo "Diff reports generated under diff_reports/"
      - name: Attach data diffs to PR as artifact
        if: ${{ steps.dbt_build.outcome == 'success' && hashFiles('diff_reports/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: data-diff-pr-${{ github.event.number }}-${{ github.run_id }}
          path: diff_reports/

      - name: Attach schema diffs to PR as artifact
        if: ${{ steps.dbt_build.outcome == 'success' && hashFiles('schema_diff_reports/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: schema-diff-pr-${{ github.event.number }}-${{ github.run_id }}
          path: schema_diff_reports/

      - name: Post summary comment on PR
        if: ${{ steps.dbt_build.outcome == 'success' && hashFiles('diff_reports/summary.md') != '' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'diff_reports/summary.md';
            let body;
            try {
              body = fs.readFileSync(path, 'utf8');
            } catch (e) {
              body = '# dbt Data Diff Summary\n\n(No changes or no summary generated)';
            }
            const runId = context.runId;
            const runNumber = context.runNumber;
            const fullBody = `<!-- dbt-data-diff-${runId} -->\n${body}\n\n---\n*Run #${runNumber} (${runId})*`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            // Always create a new comment (no longer updating existing ones)
            console.log('Creating new dbt data diff comment for run', runId);
            await github.rest.issues.createComment({ owner, repo, issue_number, body: fullBody });

      - name: Post schema summary comment on PR
        if: ${{ steps.dbt_build.outcome == 'success' && hashFiles('schema_diff_reports/schema-summary.md') != '' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'schema_diff_reports/schema-summary.md';
            let body;
            try {
              body = fs.readFileSync(path, 'utf8');
            } catch (e) {
              body = '# dbt Schema Diff Summary\n\n(No changes or no summary generated)';
            }
            const runId = context.runId;
            const runNumber = context.runNumber;
            const fullBody = `<!-- dbt-schema-diff-${runId} -->\n${body}\n\n---\n*Run #${runNumber} (${runId})*`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            console.log('Creating new dbt schema diff comment for run', runId);
            await github.rest.issues.createComment({ owner, repo, issue_number, body: fullBody });

      - name: Cleanup dataset
        if: always()
        run: bash scripts/drop_bq_dataset.sh
